{"version":3,"sources":["views/customer/ListCustomers.js","services/helper.js","services/customer.js"],"names":["withNamespaces","t","categories","useSelector","state","useState","page","limit","pagination","setPagination","data","setData","columns","title","dataIndex","render","fullname","email","status","color","Status","rank","filter","item","id","name","filters","text","value","filterMode","users","sorter","a","b","sortDirections","defaultSortOrder","_id","size","to","useEffect","console","log","getListCustomers","res","key","forEach","paginationInfo","total","pageSize","notification","error","message","description","placement","duration","xs","md","className","dataSource","onChange","current","Object","keys","length","BaseHelper","values","isNaN","parseFloat","toLocaleString","style","currency","callback","axios","AxiosConfig","api","get","then","catch","err","response","getToken","getCustomerDetail","customer_id","updateCustomer","isBlock","patch"],"mappings":"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","file":"static/js/30.94856199.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CCol, CRow, CCard, CCardBody, CCardHeader } from \"@coreui/react\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nimport { Status } from \"src/configs\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport {\r\n  Table,\r\n  // Tag,\r\n  Space,\r\n  Tabs,\r\n  notification,\r\n  Avatar,\r\n  Tag,\r\n  Spin,\r\n} from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getListCustomers } from \"src/services/customer\";\r\nimport { withNamespaces } from \"react-i18next\";\r\nimport BaseHelper from \"src/services/helper\";\r\n\r\nconst ListCustomers = ({ t }) => {\r\n  const categories = useSelector((state) => state).categories;\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: 10,\r\n  });\r\n  const [data, setData] = useState();\r\n  const columns = [\r\n    {\r\n      title: t(\"ID\"),\r\n      dataIndex: \"key\",\r\n    },\r\n    {\r\n      title: t(\"Name\"),\r\n      dataIndex: \"fullname\",\r\n      render: (fullname) => <>{fullname}</>,\r\n    },\r\n    {\r\n      title: t(\"Email\"),\r\n      dataIndex: \"email\",\r\n      render: (email) => <>{email}</>,\r\n    },\r\n    {\r\n      title: t(\"Rank\"),\r\n      dataIndex: \"rank\",\r\n      render: (status = 0) => {\r\n        let color = Status.rank.filter((item) => item.id == status)[0]?.color;\r\n        let name = Status.rank.filter((item) => item.id == status)[0]?.name;\r\n        return (\r\n          <>\r\n            <Tag color={color} key={name}>\r\n              {name}\r\n            </Tag>\r\n          </>\r\n        );\r\n      },\r\n      filters: [\r\n        {\r\n          text: \"Bronze\",\r\n          value: 0,\r\n        },\r\n        {\r\n          text: \"Silver\",\r\n          value: 1,\r\n        },\r\n        {\r\n          text: \"Gold\",\r\n          value: 2,\r\n        },\r\n        {\r\n          text: \"Diamond\",\r\n          value: 3,\r\n        },\r\n      ],\r\n      filterMode: \"tree\",\r\n    },\r\n    {\r\n      title: t(\"Status\"),\r\n      dataIndex: \"status\",\r\n      render: (status = 0) => {\r\n        let color = Status.users.filter((item) => item.id == status)[0]?.color;\r\n        let name = Status.users.filter((item) => item.id == status)[0]?.name;\r\n        return (\r\n          <>\r\n            <Tag color={color} key={name}>\r\n              {name}\r\n            </Tag>\r\n          </>\r\n        );\r\n      },\r\n      sorter: (a, b) => {\r\n        return a.status - b.status;\r\n      },\r\n      sortDirections: [\"ascend\", \"descend\", \"ascend\"],\r\n      defaultSortOrder: \"ascend\",\r\n    },\r\n    {\r\n      title: t(\"Action\"),\r\n      dataIndex: \"_id\",\r\n      render: (_id) => {\r\n        return (\r\n          <>\r\n            <Space size=\"middle\">\r\n              <Link to={`/customers/${_id}`}>{t(\"Detail\")}</Link>\r\n            </Space>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    console.log(pagination);\r\n  }, [pagination]);\r\n  const handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(\"Hello filters\", filters);\r\n    let key = pagination.pageSize * (pagination.current - 1) + 1;\r\n    getListCustomers(\r\n      { ...pagination, page: pagination.current },\r\n      filters,\r\n      (res) => {\r\n        if (res.status == 200 || res.status == 204) {\r\n          if (Object.keys(res).length == 0) {\r\n            setData([]);\r\n            setPagination({\r\n              ...pagination,\r\n              total: 0,\r\n              pageSize: pagination.limit,\r\n            });\r\n          } else {\r\n            res.data.data.forEach((item) => {\r\n              item.key = key++;\r\n            });\r\n            setData(res.data.data);\r\n            setPagination({\r\n              ...res.data.paginationInfo,\r\n              total: res.data.paginationInfo.total,\r\n              pageSize: res.data.paginationInfo.limit,\r\n            });\r\n          }\r\n        } else {\r\n          notification.error({\r\n            message: t(`Notification`),\r\n            description: `${res.message}`,\r\n            placement: `bottomRight`,\r\n            duration: 1.5,\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    getListCustomers(pagination, {}, (res) => {\r\n      console.log(res);\r\n      if (res.status == 200) {\r\n        let key = 1;\r\n        res.data.data.forEach((item) => {\r\n          item.key = key++;\r\n        });\r\n        setData(res.data.data);\r\n        setPagination({\r\n          ...res.data.paginationInfo,\r\n          total: res.data.paginationInfo.total,\r\n          pageSize: res.data.paginationInfo.limit,\r\n        });\r\n      } else {\r\n        notification.error({\r\n          message: t(`Notification`),\r\n          description: `${res.message}`,\r\n          placement: `bottomRight`,\r\n          duration: 1.5,\r\n        });\r\n      }\r\n    });\r\n  }, [categories]);\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\r\n        <CCard>\r\n          <CCardHeader>{t(\"List Customers\")}</CCardHeader>\r\n          <CCardBody>\r\n            <Table\r\n              className=\"overflow-auto\"\r\n              columns={columns}\r\n              dataSource={data}\r\n              pagination={pagination}\r\n              onChange={handleTableChange}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default withNamespaces()(ListCustomers);\r\n","class BaseHelper {\r\n  formatData(values) {\r\n    Object.keys(values).forEach((item) => {\r\n      if (!isNaN(values[item])) {\r\n        values[item] = parseFloat(values[item]);\r\n      } else {\r\n      }\r\n    });\r\n    return values;\r\n  }\r\n  formatVND(value) {\r\n    return value.toLocaleString(\"it-IT\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default new BaseHelper();\r\n","import { AxiosConfig } from \"src/configs\";\r\nimport { getToken } from \"./auth\";\r\n\r\nexport function getListCustomers(pagination, filters, callback) {\r\n  const axios = AxiosConfig();\r\n  let api = `/customers?page=${pagination.page || 1}&limit=${\r\n    pagination.limit || 100\r\n  }`;\r\n  if (filters && filters?.rank) {\r\n    api += `&rank=`;\r\n    filters.rank.forEach((item) => {\r\n      api += `${item},`;\r\n    });\r\n  }\r\n\r\n  axios\r\n    .get(api)\r\n    .then((res) => {\r\n      callback({ ...res });\r\n    })\r\n    .catch((err) => {\r\n      if (err.response) {\r\n        if (err.response.status == 401 || err.response.status == 403) {\r\n          getToken(() => {\r\n            getListCustomers(pagination, filters, callback);\r\n          });\r\n        } else {\r\n          callback({\r\n            ...err.response,\r\n            message: \"Get list customers failed!\",\r\n          });\r\n        }\r\n      }\r\n    });\r\n}\r\n\r\nexport function getCustomerDetail(customer_id, callback) {\r\n  const axios = AxiosConfig();\r\n  let api = `/customers/${customer_id}`;\r\n  axios\r\n    .get(api)\r\n    .then((res) => {\r\n      callback({ ...res });\r\n    })\r\n    .catch((err) => {\r\n      if (err.response) {\r\n        if (err.response.status == 401 || err.response.status == 403) {\r\n          getToken(() => {\r\n            getCustomerDetail(customer_id, callback);\r\n          });\r\n        } else {\r\n          callback({\r\n            ...err.response,\r\n            message: \"Get customer detail failed!\",\r\n          });\r\n        }\r\n      }\r\n    });\r\n}\r\n\r\nexport function updateCustomer(customer_id, isBlock, callback) {\r\n  const axios = AxiosConfig();\r\n  let api = ``;\r\n  if (isBlock) {\r\n    api = `/customers/unblock/${customer_id}`;\r\n  } else {\r\n    api = `/customers/block/${customer_id}`;\r\n  }\r\n  axios\r\n    .patch(api)\r\n    .then((res) => {\r\n      callback({ ...res });\r\n    })\r\n    .catch((err) => {\r\n      if (err.response) {\r\n        if (err.response.status == 401 || err.response.status == 403) {\r\n          getToken(() => {\r\n            updateCustomer(customer_id, isBlock, callback);\r\n          });\r\n        } else {\r\n          callback({\r\n            ...err.response,\r\n            message: \"Get customer detail failed!\",\r\n          });\r\n        }\r\n      }\r\n    });\r\n}\r\n"],"sourceRoot":""}